@startuml classes
set namespaceSeparator none
class "BookedServices" as entity.BookedServices {
  db : CMySQLConnection
  getBookedServices(user_id)
}
class "BookingReports" as entity.BookingReports {
  conn : CMySQLConnection
  by_category(date_from, date_to)
  cleaners_booked(date_from, date_to)
  getBookingsByCleaner(start, end)
}
class "CategoryService" as entity.CategoryService {
  cat_desc : NoneType
  cat_sv_name : NoneType
  catsv_id : NoneType
  parentCat_id : NoneType
  addCategory(cat_sv_name, cat_desc)
  addNewService(cat_sv_name, parentCat_id)
  deleteCategory(catsv_id)
  fetchCleanersByCategory(category_id)
  getAllCategories()
  getServicesByCategory(parentCat_id)
  searchCategories(search_query)
  updateCategoryDesc(catsv_id, new_desc)
}
class "CleanerAnalytics" as entity.CleanerAnalytics {
  conn : CMySQLConnection
  log_view(cleaner_id, viewer_id)
  shortlist_count(cleaner_id)
  shortlist_count_for_user(cleaner_id, homeowner_id)
  view_count(cleaner_id)
}
class "CleanerService" as entity.CleanerService {
  category_id : NoneType
  category_name : NoneType
  clean_svc_id : NoneType
  cleaner_id : NoneType
  description : NoneType
  price : NoneType
  service_id : NoneType
  service_name : NoneType
  addService(cleaner_id, category_id, service_id, price, description)
  addShortlist(cleaner_id, homeowner_id, category_id, service_id)
  deleteService(cleaner_id, service_id)
  getAllAvailableService()
  getCleanerProfile(cleaner_id)
  getCleanerServicesByUser(user_id)
  getJobHistoryByCleaner(cleaner_id)
  getShortlistedServices(homeowner_id)
  removeShortlist(cleaner_id, homeowner_id, category_id, service_id)
  searchAllServices(search_query)
  searchCleanerServices(search_query, cleaner_id)
  searchShortlistedServicesByCategory(user_id, search_query)
  updateService(cleaner_id, service_id, new_price, new_description)
}
class "UserAccount" as entity.UserAccount {
  email : NoneType
  name : NoneType
  password : NoneType
  +profile: UserProfile
  role
  role_id : NoneType
  suspended : NoneType
  user_id : NoneType
  username : NoneType
  createAccount(name, username, password, email, role_id)
  loginAccount(username, password)
  searchAccounts(search_query)
  setAccountSuspension(user_id: int, suspended: bool)
  updateAccount(user_id, new_name, new_username, new_email, new_password, new_role_id)
  viewAccounts()
}
class "UserProfile" as entity.UserProfile {
  role : NoneType
  role_id : NoneType
  suspended : NoneType
  createProfile(role)
  searchProfiles(search_query)
  setProfileSuspension(role_id: int, suspended: bool)
  updateProfile(role_id, new_role)
  viewProfiles()
}
entity.UserProfile "1" --> "1" entity.UserAccount : profile
@enduml
